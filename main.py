import telebot
import random
import dw
import random
import math
from threading import Thread
import sqlite3 as sq
from time import sleep
from telebot.types import ReplyKeyboardMarkup, KeyboardButton
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
import pickaxe as pic
from datetime import time, date, datetime
import text_work as tw

# –û–¥–∏–Ω –∫—É—Å–æ–∫ –º—è—Å–∞ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç 10 –µ–¥–∏–Ω–∏—Ü –≥–æ–ª–æ–¥–∞


def initialize_meat_grid():
    meat_grid = [[random.randint(1, 10) for _ in range(3)] for _ in range(3)]
    return meat_grid


def random_meat():
    a = random.randint(1, 100)
    if 1 <= a <= 10:
        return 0
    if 10 < a <= 30:
        return random.randint(1, 3)
    if 30 < a <= 70:
        return random.randint(3, 7)
    if 70 < a <= 95:
        return random.randint(6, 15)
    if 95 < a <= 100:
        return random.randint(15, 20)


with sq.connect("gnomes.db") as con:
    cur = con.cursor()
    cur.execute("""CREATE TABLE IF NOT EXISTS users_gnomes (
            user_id INTEGER,
            gnome_name TEXT,
            hunger_level INTEGER,
            meat INTEGER,
            thirst_level INTEGER,
            beer INTEGER, 
            tickets_to_expedition INTEGER,
            gold INTEGER,
            pickaxe_level INTEGER,
            pickaxe_durability INTEGER,
            pickaxe_gold_per_strike INTEGER, 
            new_pickaxe_level INTEGER,
            shop_meat INTEGER,
            shop_beer INTEGER,
            birth_date TEXT,
            is_dead INTEGER
            
    )
                """)


bot = telebot.TeleBot("6370080307:AAEm_cm-4O06Ond8OzUA0ht4Koo3OOljsZY")


def create_gnome(user_id, gnome_name):
    with sq.connect("gnomes.db") as con:
        cursor = con.cursor()
        cursor.execute(
            "SELECT COUNT(*) FROM users_gnomes WHERE user_id=? AND is_dead!=1", (user_id,))
        num_gnomes = cursor.fetchone()[0]

        if num_gnomes > 0:
            return None
        current_date = str(datetime.now().date())
        gnome = dw.Dwarf(gnome_name)
        gnome.feed(100)
        gnome.drink(100)
        cursor.execute("""INSERT INTO users_gnomes (
                       user_id, 
                       gnome_name, 
                       hunger_level, 
                       meat, 
                       thirst_level, 
                       beer,  
                       tickets_to_expedition,
                       gold,
                       pickaxe_level,
                       pickaxe_durability,
                       pickaxe_gold_per_strike,
                       new_pickaxe_level,
                       shop_meat,
                       shop_beer,
                       birth_date,
                       is_dead) 
                       VALUES (?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?,?,?)""",
                       (user_id, gnome_name, 100, 10, 100, 10, 3, 0, 0, 0, 0, 0, 5, 5, current_date, 0))

    return gnome


def random_pickaxe():
    a = random.randint(1000, 10300)
    return (a//1000)


def repair_pickaxe(level):
    return level*2


def get_gnome(user_id):
    with sq.connect("gnomes.db") as con:
        cursor = con.cursor()
        cursor.execute(
            "SELECT gnome_name, hunger_level, thirst_level FROM users_gnomes WHERE user_id=? AND is_dead!=1", (user_id,))
        row = cursor.fetchone()
        if row:
            gnome_name, hunger_level, thirst_level = row[:3]
            gnome = dw.Dwarf(gnome_name)
            gnome.feed(hunger_level)
            gnome.drink(thirst_level)

            return gnome
        else:
            return None


def get_pickaxe(user_id):
    with sq.connect("gnomes.db") as con:
        cursor = con.cursor()
        cursor.execute(
            "SELECT pickaxe_level, pickaxe_durability, pickaxe_gold_per_strike FROM users_gnomes WHERE user_id=? AND is_dead!=1", (user_id,))
        row = cursor.fetchone()
        if row:
            pickaxe_level, pickaxe_durability, pickaxe_gold_per_strike = row[:3]
            tool = pic.Pickaxe(pickaxe_level, pickaxe_durability)
            return tool
        else:
            return None


def show_gold(user_id):
    with sq.connect("gnomes.db") as con:
        cursor = con.cursor()
        cursor.execute(
            "SELECT gold FROM users_gnomes WHERE user_id = ? AND is_dead!=1", (user_id, ))
        row = cursor.fetchone()
        if row:
            return row[0]


def get_all_gnomes_names(user_id):
    with sq.connect("gnomes.db") as con:
        cursor = con.cursor()
        cursor.execute(
            "SELECT gnome_name, birth_date, hunger_level, thirst_level, is_dead FROM users_gnomes WHERE user_id=?", (user_id,))
        rows = cursor.fetchall()
        return rows


def chat_show_my_gnomes(message, user_id):
    rows = get_all_gnomes_names(user_id)
    response = "–í–∞—à–∏ –≥–Ω–æ–º—ã: \n"
    if rows:
        for row in rows:
            date_from_string = datetime.strptime(row[1], "%Y-%m-%d").date()
            current_date = datetime.now().date()
            date_difference = current_date - date_from_string
            if row[-1]:
                response += f"{row[0]} –ø—Ä–æ–∂–∏–ª —Å –≤–∞–º–∏ {date_difference.days}.\n"
            else:
                response += f"{row[0]} –∂–∏–≤–µ—Ç —Å –≤–∞–º–∏ {date_difference.days} –¥–Ω–µ–π.\n–£—Ä–æ–≤–µ–Ω—å –Ω–∞—Å—ã—â–µ–Ω–µ–Ω–∏—è: " + \
                    "üçñ" * \
                    dw.level_of_hunger(
                        row[2])+"\n–£—Ä–æ–≤–µ–Ω—å –∂–∞–∂–¥—ã: " + "üç∫"*dw.level_of_thirst(row[3])
    else:
        response = "–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –≥–Ω–æ–º–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–µ–≥–æ –ø–µ—Ä–≤–æ–≥–æ –≥–Ω–æ–º–∞."
    bot.reply_to(message, response)


def decrease_hunger_level(user_id):
    gnome = get_gnome(user_id)
    if gnome:
        with sq.connect("gnomes.db") as con:
            gnome.starve(10)
            hunger = gnome.get_hunger_level()
            cursor = con.cursor()
            cursor.execute(
                "UPDATE users_gnomes SET hunger_level=? WHERE user_id=? AND is_dead!=1", (hunger, user_id))
            if hunger < 30:
                bot.send_message(
                    user_id, f"{gnome.name} –∞–¥—Å–∫–∏ {tw.detect_gender(gnome.name, '–≥–æ–ª–æ–¥–µ–Ω', '–≥–æ–ª–æ–¥–Ω–∞')}!")
            elif hunger == 0:
                cursor.execute(
                    "UPDATE users_gnomes SET is_dead=? WHERE user_id=?", (1, user_id))
                bot.send_message(
                    user_id, f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, {gnome.name} –Ω–µ {tw.detect_gender(gnome.name, '—Å–º–æ–≥', '—Å–º–æ–≥–ª–∞')} –≤—ã–Ω–µ—Å—Ç–∏ —Ç–∞–∫–æ–π –≥–æ–ª–æ–¥–æ–≤–∫–∏ –∏ —É—à–µ–ª –≤ –ª–µ—Å.")


def decrease_thirst_level(user_id):
    gnome = get_gnome(user_id)
    if gnome:
        with sq.connect("gnomes.db") as con:
            gnome.crave(10)
            thirst = gnome.get_thirst_level()

            cursor = con.cursor()
            cursor.execute(
                "UPDATE users_gnomes SET thirst_level=? WHERE user_id=? AND is_dead!=1", (thirst, user_id))
            if thirst < 30:
                bot.send_message(
                    user_id, f"{gnome.name} —É–∂–µ –∑–∞–±—ã–≤–∞–µ—Ç –≤–∫—É—Å –ø–∏–≤–∞!")
            elif thirst == 0:
                cursor.execute(
                    "UPDATE users_gnomes SET is_dead=? WHERE user_id=?", (1, user_id))
                bot.send_message(
                    user_id, f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, {gnome.name} –Ω–µ {tw.detect_gender(gnome.name, '—Å–º–æ–≥', '—Å–º–æ–≥–ª–∞')} –≤—ã–Ω–µ—Å—Ç–∏ —Ç–∞–∫–æ–π –≥—Ä—É—Å—Ç–Ω–æ–π –∂–∏–∑–Ω–∏ –∏ —É—à–µ–ª –≤ –ª–µ—Å.")


def increase_tickets(user_id):
    gnome = get_gnome(user_id)
    if gnome:
        with sq.connect("gnomes.db") as con:
            cursor = con.cursor()
            cursor.execute(
                "SELECT tickets_to_expedition FROM users_gnomes WHERE user_id=? AND is_dead!=1", (user_id,))
            row = cursor.fetchone()
            amount = min(3, row[0]+1)
            cursor.execute(
                "UPDATE users_gnomes SET tickets_to_expedition=? WHERE user_id=? AND is_dead!=1", (amount, user_id))
            if amount == 3:
                bot.send_message(
                    user_id, f"{gnome.name} –≤–Ω–æ–≤—å {tw.detect_gender(gnome.name, '–ø–æ–ª–æ–Ω', '–ø–æ–ª–Ω–∞')} —Å–∏–ª –¥–ª—è –≤—ã–ª–∞–∑–æ–∫!")


def increase_shop(user_id):
    gnome = get_gnome(user_id)
    if gnome:
        with sq.connect("gnomes.db") as con:
            cursor = con.cursor()
            amount = 5
            cursor.execute(
                "UPDATE users_gnomes SET meat=?, beer = ? WHERE user_id=? AND is_dead!=1", (amount, amount, user_id))
            bot.send_message(
                user_id, f"–ú–∞–≥–∞–∑–∏–Ω –≤–æ—Å–ø–æ–ª–Ω–∏–ª —Å–≤–æ–∏ –∑–∞–ø–∞—Å—ã!")


def buy_meat(user_id):
    gnome = get_gnome(user_id)
    if gnome:
        with sq.connect("gnomes.db") as con:
            cursor = con.cursor()
            cursor.execute(
                "SELECT gold, meat FROM users_gnomes WHERE user_id = ? AND is_dead!=1", (user_id,))
            row = cursor.fetchone()
            if row:
                amount_of_gold, amount_of_meat = row
                if amount_of_gold >= 5:
                    amount_of_gold -= 5
                    amount_of_meat += 1
                    cursor.execute("UPDATE users_gnomes SET gold=?, meat=? WHERE user_id=? AND is_dead!=1", (
                        amount_of_gold, amount_of_meat, user_id,))
                    return True
                else:
                    return False


def buy_beer(user_id):
    gnome = get_gnome(user_id)
    if gnome:
        with sq.connect("gnomes.db") as con:
            cursor = con.cursor()
            cursor.execute(
                "SELECT gold, beer FROM users_gnomes WHERE user_id = ? AND is_dead!=1", (user_id,))
            row = cursor.fetchone()
            if row:
                amount_of_gold, amount_of_beer = row
                if amount_of_gold >= 5:
                    amount_of_gold -= 5
                    amount_of_beer += 1
                    cursor.execute("UPDATE users_gnomes SET gold=?, beer=? WHERE user_id=? AND is_dead!=1", (
                        amount_of_gold, amount_of_beer, user_id,))
                    return True
                else:
                    return False


def buy_pickaxe_upgrade(user_id):
    gnome = get_gnome(user_id)
    if gnome:
        with sq.connect("gnomes.db") as con:
            cursor = con.cursor()
            cursor.execute(
                "SELECT gold, pickaxe_level FROM users_gnomes WHERE user_id = ? AND is_dead!=1", (user_id,))
            row = cursor.fetchone()
            if row:
                amount_of_gold, pickaxe_level = row
                if amount_of_gold >= 100:
                    amount_of_gold -= 100
                    pickaxe_level += 1
                    if pickaxe_level<11:
                        tool = pic.Pickaxe(pickaxe_level, 500)
                        tool.durability

                        cursor.execute("""UPDATE users_gnomes 
                                    SET gold=?, 
                                    pickaxe_level=?, 
                                    pickaxe_durability=?
                                    WHERE user_id=? AND is_dead!=1""", (
                            amount_of_gold, tool.level, tool.durability, user_id,))
                        return 1
                    else:
                        return -1
                else:
                    return 0


def mine_gold_task(user_id):
    tool = get_pickaxe(user_id)
    if tool:
        with sq.connect("gnomes.db") as con:
            cursor = con.cursor()
            cursor.execute(
                "SELECT pickaxe_level, pickaxe_durability FROM users_gnomes WHERE user_id=? AND is_dead!=1", (user_id,))
            row = cursor.fetchone()
            tool = pic.Pickaxe(row[0], row[1])
            amount_of_gold = show_gold(user_id)
            print(tool.durability, row[1])
            cursor.execute(
                """UPDATE users_gnomes 
                SET gold=?, 
                pickaxe_durability=? 
                WHERE user_id=? AND is_dead!=1""", (amount_of_gold + tool.mine_gold(), tool.durability, user_id))
            print(tool.durability, row[1])


def show_meat(user_id):
    with sq.connect("gnomes.db") as con:
        cursor = con.cursor()
        cursor.execute(
            "SELECT meat FROM users_gnomes WHERE user_id=? AND is_dead!=1", (user_id,))
        row = cursor.fetchone()
        return row[0]


def show_beer(user_id):
    with sq.connect("gnomes.db") as con:
        cursor = con.cursor()
        cursor.execute(
            "SELECT beer FROM users_gnomes WHERE user_id=? AND is_dead!=1", (user_id,))
        row = cursor.fetchone()
        return row[0]


def count_piece_of_meat_to_feed(hunger):
    if hunger >= 85:
        return 0
    necessity = int(math.ceil((100 - hunger)/10))
    return necessity


def count_beer_to_drink(hunger):
    if hunger >= 65:
        return 0
    necessity = int(math.ceil((100 - hunger)/10))
    return necessity


def increase_hunger_level(user_id):
    gnome = get_gnome(user_id)
    if gnome:
        with sq.connect("gnomes.db") as con:
            hunger = gnome.get_hunger_level()
            meat = show_meat(user_id)
            necessity = count_piece_of_meat_to_feed(hunger)
            if meat == 0:
                return None
            if meat >= necessity:
                gnome.feed(necessity*10)
                hunger = gnome.get_hunger_level()

                meat -= necessity
                cursor = con.cursor()
                cursor.execute(
                    "UPDATE users_gnomes SET hunger_level=? WHERE user_id=?", (hunger, user_id))
                cursor.execute(
                    "UPDATE users_gnomes SET meat=? WHERE user_id=?", (meat, user_id))
                return 1
            else:
                gnome.feed(meat*10)
                meat = 0
                cursor = con.cursor()
                cursor.execute(
                    "UPDATE users_gnomes SET hunger_level=? WHERE user_id=?", (hunger, user_id))
                cursor.execute(
                    "UPDATE users_gnomes SET meat=? WHERE user_id=?", (meat, user_id))
                return 1


def increase_thirst_level(user_id):
    gnome = get_gnome(user_id)
    if gnome:
        with sq.connect("gnomes.db") as con:
            thirst = gnome.get_thirst_level()
            beer = show_beer(user_id)
            necessity = count_beer_to_drink(thirst)
            if beer == 0:
                return None
            if beer >= necessity:
                gnome.drink(necessity*10)
                thirst = gnome.get_thirst_level()

                beer -= necessity
                cursor = con.cursor()
                cursor.execute(
                    "UPDATE users_gnomes SET thirst_level=? WHERE user_id=?", (thirst, user_id))
                cursor.execute(
                    "UPDATE users_gnomes SET beer=? WHERE user_id=?", (beer, user_id))
                return 1
            else:
                gnome.drink(beer*10)
                beer = 0
                thirst = gnome.get_thirst_level()
                cursor = con.cursor()
                cursor.execute(
                    "UPDATE users_gnomes SET thirst_level=? WHERE user_id=?", (thirst, user_id))
                cursor.execute(
                    "UPDATE users_gnomes SET beer=? WHERE user_id=?", (beer, user_id))
                return 1


@bot.message_handler(commands=['start'])
def start(message):
    user_id = message.from_user.id
    markup_inline = InlineKeyboardMarkup()
    markup_inline.row_width = 2
    markup_inline.add(
        InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å –≥–Ω–æ–º–∞", callback_data="create_gnome"),
        InlineKeyboardButton("–ú–æ–∏ –≥–Ω–æ–º—ã", callback_data="my_gnomes"),
        InlineKeyboardButton("–ü–æ–∫–æ—Ä–º–∏—Ç—å –≥–Ω–æ–º–∞", callback_data="feed_gnome"),
        InlineKeyboardButton("–ù–∞–ª–∏—Ç—å –≥–Ω–æ–º—É –ø–∏–≤–∞", callback_data="drink_gnome"),
        InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–ø–∞—Å—ã", callback_data="show_meat"),
        InlineKeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—Å—è –Ω–∞ –≤—ã–ª–∞–∑–∫—É",
                             callback_data="go_on_expedition"),
        InlineKeyboardButton("–ö–∏—Ä–∫–∞",
                             callback_data="pickaxe_info"),
        InlineKeyboardButton("–ú–∞–≥–∞–∑–∏–Ω",
                             callback_data="shop")
    )
    markup_reply = ReplyKeyboardMarkup(resize_keyboard=True)
    reply_button = KeyboardButton("–ú–µ–Ω—é")
    markup_reply.add(reply_button)

    bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup_inline)
    bot.send_message(
        user_id, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–ú–µ–Ω—é', —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=markup_reply)


@bot.message_handler(func=lambda message: message.text == "–ú–µ–Ω—é")
def handle_reply(message):
    user_id = message.from_user.id
    markup = InlineKeyboardMarkup()
    markup.row_width = 2
    markup.add(
        InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å –≥–Ω–æ–º–∞", callback_data="create_gnome"),
        InlineKeyboardButton("–ú–æ–∏ –≥–Ω–æ–º—ã", callback_data="my_gnomes"),
        InlineKeyboardButton("–ü–æ–∫–æ—Ä–º–∏—Ç—å –≥–Ω–æ–º–∞", callback_data="feed_gnome"),
        InlineKeyboardButton("–ù–∞–ª–∏—Ç—å –≥–Ω–æ–º—É –ø–∏–≤–∞", callback_data="drink_gnome"),
        InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–ø–∞—Å—ã", callback_data="show_meat"),
        InlineKeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—Å—è –Ω–∞ –≤—ã–ª–∞–∑–∫—É",
                             callback_data="go_on_expedition"),
        InlineKeyboardButton("–ö–∏—Ä–∫–∞",
                             callback_data="pickaxe_info"),
        InlineKeyboardButton("–ú–∞–≥–∞–∑–∏–Ω",
                             callback_data="shop")
    )
    bot.send_message(user_id, "–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=markup)


@bot.callback_query_handler(func=lambda call: True)
def handle_callback_query(call):
    user_id = call.from_user.id
    data = call.data
    if data == "create_gnome":
        handle_create_gnome(call.message, user_id)
        bot.answer_callback_query(call.id)

    elif data == "my_gnomes":
        chat_show_my_gnomes(call.message, user_id)

    elif data == "hunger_level":
        chat_get_hunger_level(call.message, user_id)

    elif data == "feed_gnome":
        handle_feed_gnome(call.message, user_id)

    elif data == "show_meat":
        handle_show_meat(call.message, user_id)

    elif data == "drink_gnome":
        handle_drink_gnome(call.message, user_id)

    elif data == "go_on_expedition":
        handle_go_on_expedition(call.message, user_id)
    elif data == "pickaxe_info":
        pickaxe_info(call.message, user_id)

    elif data == "shop":
        markup = InlineKeyboardMarkup()
        markup.row_width = 1
        markup.add(
            InlineKeyboardButton(
                "–ö—É–ø–∏—Ç—å üçñ (5üí∞)", callback_data="buy_meat_in_shop"),
            InlineKeyboardButton(
                "–ö—É–ø–∏—Ç—å üç∫ (5üí∞)", callback_data="buy_beer_in_shop"),
            InlineKeyboardButton(
                "–£–ª—É—á—à–∏—Ç—å –∫–∏—Ä–∫—É (100üí∞)", callback_data="upgrade_pickaxe_in_shop"),
        )
        bot.send_message(
            user_id, f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω! –ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏?", reply_markup=markup)
    elif data.startswith("cell_"):
        gnome = get_gnome(user_id)
        if gnome:
            _, row, col = data.split('_')
            with sq.connect("gnomes.db") as con:
                cursor = con.cursor()
                cursor.execute(
                    "SELECT tickets_to_expedition FROM users_gnomes WHERE user_id=? AND is_dead!=1", (user_id,))
                row = cursor.fetchone()
                if row[0] != 0:
                    a = random.randint(1, 125)
                    if a >= 58 and a <= 116:
                        output = random_meat()
                        cursor.execute("UPDATE users_gnomes SET meat=? WHERE user_id=? AND is_dead!=1",
                                       (output+show_meat(user_id), user_id))
                        cursor.execute("UPDATE users_gnomes SET tickets_to_expedition=? WHERE user_id=? AND is_dead!=1",
                                       (row[0]-1, user_id))
                        if output != 0:
                            bot.answer_callback_query(
                                call.id, text=f"–í—ã –Ω–∞—à–ª–∏ {output} üçñ!")
                        elif output == 0:
                            bot.answer_callback_query(
                                call.id, text=f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤—ã –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∏.")
                    elif a < 58:
                        output = random_meat()
                        cursor.execute("UPDATE users_gnomes SET beer=? WHERE user_id=? AND is_dead!=1",
                                       (output+show_beer(user_id), user_id))
                        cursor.execute("UPDATE users_gnomes SET tickets_to_expedition=? WHERE user_id=? AND is_dead!=1",
                                       (row[0]-1, user_id))
                        if output != 0:
                            bot.answer_callback_query(
                                call.id, text=f"–í—ã –Ω–∞—à–ª–∏ {output} üç∫!")
                        elif output == 0:
                            bot.answer_callback_query(
                                call.id, text=f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤—ã –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∏.")
                    else:
                        level = random_pickaxe()
                        tool = pic.Pickaxe(level, 500)
                        cursor.execute(
                            "SELECT pickaxe_level FROM users_gnomes WHERE user_id=? AND is_dead!=1", (user_id,))
                        current_pickaxe_level = cursor.fetchone()[0]
                        if current_pickaxe_level == 0:
                            cursor.execute("""UPDATE users_gnomes SET 
                                    pickaxe_level=?,
                                    pickaxe_durability=?,
                                    pickaxe_gold_per_strike=? WHERE user_id = ? and is_dead!=1""",
                                           (tool.level, tool.durability, tool.gold_per_strike, user_id,))
                            bot.answer_callback_query(
                                call.id, text=f"""–í—ã –Ω–∞—à–ª–∏ ‚õè {level} —É—Ä–æ–≤–Ω—è! """)
                        else:
                            if level > current_pickaxe_level:
                                cursor.execute("""UPDATE users_gnomes SET 
                                    new_pickaxe_level=? WHERE user_id = ? and is_dead!=1""",
                                               (level, user_id,))

                                markup = InlineKeyboardMarkup()
                                markup.row_width = 2
                                markup.add(
                                    InlineKeyboardButton(
                                        "–û–±–Ω–æ–≤–∏—Ç—å ‚õè", callback_data="update_pickaxe"),
                                    InlineKeyboardButton(
                                        "–ù–µ –æ–±–Ω–æ–≤–ª—è—Ç—å ‚õè", callback_data="keep_pickaxe"),
                                )
                                bot.send_message(
                                    user_id, f"–í—ã –Ω–∞—à–ª–∏ ‚õè {level} —É—Ä–æ–≤–Ω—è! –•–æ—Ç–∏—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å ‚õè?", reply_markup=markup)

                            else:
                                if current_pickaxe_level < level:
                                    bot.answer_callback_query(
                                        call.id, text=f"""–í—ã –Ω–∞—à–ª–∏ ‚õè {level} —É—Ä–æ–≤–Ω—è! –¢–∞–∫ –∫–∞–∫ —Ç–µ–∫—É—â–∞—è –∫–∏—Ä–∫–∞ –ª—É—á—à–µ, {gnome.name} {tw.detect_gender(gnome.name, '–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª', '–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∞')}  ‚õè –¥–ª—è —Ä–µ–º–æ–Ω—Ç–∞ —Å–≤–æ–µ–π.""")
                                if current_pickaxe_level == level:
                                    bot.answer_callback_query(
                                        call.id, text=f"""–í—ã –Ω–∞—à–ª–∏ ‚õè {level} —É—Ä–æ–≤–Ω—è! –¢–∞–∫ –∫–∞–∫ —Ç–µ–∫—É—â–∞—è –∫–∏—Ä–∫–∞ —Ç–∞–∫–∞—è –∂–µ, {gnome.name} {tw.detect_gender(gnome.name, '–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª', '–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∞')} ‚õè –¥–ª—è —Ä–µ–º–æ–Ω—Ç–∞ —Å–≤–æ–µ–π.""")
                                cursor.execute("""UPDATE users_gnomes SET 
                                pickaxe_durability=? WHERE user_id = ? and is_dead!=1""",
                                               (tool.durability + repair_pickaxe(level), user_id,))

                if row[0] == 0:
                    bot.answer_callback_query(
                        call.id, text=f"{gnome.name} —Å–ª–∏—à–∫–æ–º {tw.detect_gender(gnome.name, '—É—Å—Ç–∞–ª', '—É—Å—Ç–∞–ª–∞')}, —á—Ç–æ–±—ã –∫—É–¥–∞ —Ç–æ –∏–¥—Ç–∏!")

    elif data == "update_pickaxe":
        with sq.connect("gnomes.db") as con:
            cursor = con.cursor()
            cursor.execute(
                "SELECT new_pickaxe_level FROM users_gnomes WHERE user_id=? AND is_dead!=1", (user_id,))
            new_pickaxe_level = cursor.fetchone()[0]
            cursor.execute("""UPDATE users_gnomes SET 
                           pickaxe_level=? WHERE user_id = ? and is_dead!=1""",
                           (new_pickaxe_level, user_id,))
            bot.answer_callback_query(
                call.id, text=f"‚õè–ö–∏—Ä–∫–∞‚õè —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–æ {new_pickaxe_level} —É—Ä–æ–≤–Ω—è!")

    elif data == "keep_pickaxe":
        bot.answer_callback_query(
            call.id, text="–í—ã —Ä–µ—à–∏–ª–∏ –Ω–µ –æ–±–Ω–æ–≤–ª—è—Ç—å ‚õè–∫–∏—Ä–∫—É‚õè.")
    elif data == "buy_meat_in_shop":
        if buy_meat(user_id):
            bot.answer_callback_query(
                call.id, text="–í—ã –∫—É–ø–∏–ª–∏ üçñ!")
        else:
            bot.answer_callback_query(
                call.id, text="–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤.")

    elif data == "buy_beer_in_shop":
        if buy_beer(user_id):
            bot.answer_callback_query(
                call.id, text="–í—ã –∫—É–ø–∏–ª–∏ üç∫!")
        else:
            bot.answer_callback_query(
                call.id, text="–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤.")

    elif data == "upgrade_pickaxe_in_shop":
        res = buy_pickaxe_upgrade(user_id)
        if res == 1:
            bot.answer_callback_query(
                call.id, text="–í—ã —É–ª—É—á—à–∏–ª–∏ —Å–≤–æ—é ‚õè –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è!")
        elif res == 0:
            bot.answer_callback_query(
                call.id, text="–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤.")
        elif res == -1:
            bot.answer_callback_query(
                call.id, text="–í–∞—à–∞ –∫–∏—Ä–∫–∞ —É–∂–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è!")

def handle_go_on_expedition(message, user_id):
    gnome = get_gnome(user_id)
    if gnome:
        markup = InlineKeyboardMarkup()
        for row in range(3):
            row_buttons = []
            for col in range(3):
                row_buttons.append(InlineKeyboardButton(
                    "‚úÖ", callback_data=f"cell_{row}_{col}"))
            markup.add(*row_buttons)
        bot.send_message(
            user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–µ—Ç–∫—É –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è:", reply_markup=markup)
    else:
        bot.reply_to(
            message, "–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –≥–Ω–æ–º–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –µ–≥–æ.")


def handle_my_gnomes(message, user_id):
    chat_show_my_gnomes(message, user_id)


def handle_show_meat(message, user_id):
    gnome = get_gnome(user_id)
    if gnome:
        amount_of_meat = show_meat(user_id)
        amount_of_beer = show_beer(user_id)
        amount_of_gold = show_gold(user_id)
        bot.send_message(
            user_id, f"–í –≤–∞—à–∏—Ö –∑–∞–ø–∞—Å–∞—Ö –µ—Å—Ç—å:\n{amount_of_meat}üçñ –∏ {amount_of_beer}üç∫\n–ö–∞–∑–Ω–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç {amount_of_gold}üí∞!")
    else:
        bot.reply_to(
            message, "–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –≥–Ω–æ–º–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –µ–≥–æ.")


def handle_create_gnome(message, user_id):
    gnome = get_gnome(user_id)
    if gnome:
        bot.send_message(
            user_id, "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –≥–Ω–æ–º. –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –±–æ–ª—å—à–µ.")
    else:
        bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –≤–∞—à–µ–≥–æ –≥–Ω–æ–º–∞:")
        bot.register_next_step_handler(
            message, lambda m: create_gnome_and_notify(user_id, m.text))


def create_gnome_and_notify(user_id, gnome_name):
    gnome = create_gnome(user_id, gnome_name)
    if gnome:
        bot.send_message(
            user_id, f"{gnome_name} {tw.detect_gender(gnome.name, '–≤—ã–±—Ä–∞–ª—Å—è', '–≤—ã–±—Ä–∞–ª–∞—Å—å')} –∏–∑ —Ç–µ–º–Ω–æ–π –ø–µ—â–µ—Ä—ã!")
    else:
        bot.send_message(
            user_id, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≥–Ω–æ–º–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∑–∞ –ø–æ–º–æ—â—å—é.")


def chat_get_hunger_level(message, user_id):

    gnome = get_gnome(user_id)
    if gnome:
        hunger = gnome.get_hunger_level()
        thirst = gnome.get_thirst_level()

        bot.reply_to(
            message, f"–í–∞—à –≥–Ω–æ–º {dw.level_of_hunger(hunger)} –∏ {dw.level_of_thirst(thirst)}")

    else:
        bot.reply_to(
            message, "–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –≥–Ω–æ–º–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –µ–≥–æ.")


def handle_feed_gnome(message, user_id):
    gnome = get_gnome(user_id)
    if gnome:
        if increase_hunger_level(user_id):
            gnome = get_gnome(user_id)
            if show_meat(user_id) != 0:
                bot.reply_to(
                    message, f"–í—ã –ø–æ–∫–æ—Ä–º–∏–ª–∏ {tw.inflect_to_accusative(gnome.name)}!\n–£—Ä–æ–≤–µ–Ω—å –Ω–∞—Å—ã—â–µ–Ω–µ–Ω–∏—è: " + dw.level_of_hunger(gnome.get_hunger_level())*"üçñ")
            else:
                bot.reply_to(
                    message, f"–í—ã –ø–æ–∫–æ—Ä–º–∏–ª–∏ {tw.inflect_to_accusative(gnome.name) }!\n–£—Ä–æ–≤–µ–Ω—å –Ω–∞—Å—ã—â–µ–Ω–µ–Ω–∏—è: " + dw.level_of_hunger(gnome.get_hunger_level())*"üçñ"+"\n–ó–∞–ø–∞—Å—ã –º—è—Å–∞ –∏—Å—Å—è–∫–ª–∏!")
        else:
            bot.reply_to(
                message, f"–ó–∞–ø–∞—Å—ã –º—è—Å–∞ –∏—Å—Å—è–∫–ª–∏ - —Å–∫–æ—Ä–µ–µ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ—Å—å –Ω–∞ –≤—ã–ª–∞–∑–∫—É!")
    else:
        bot.reply_to(
            message, "–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –≥–Ω–æ–º–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–µ–≥–æ –ø–µ—Ä–≤–æ–≥–æ –≥–Ω–æ–º–∞.")


def pickaxe_info(message, user_id):
    gnome = get_gnome(user_id)
    pickaxe = get_pickaxe(user_id)
    if gnome:
        if pickaxe.level == 0:
            bot.send_message(
                user_id, f"{gnome.name} {tw.detect_gender(gnome.name, '–ø–æ—Ç–µ—Ä—è–ª', '–ø–æ—Ç–µ—Ä—è–ª–∞')} —Å–≤–æ—é —Å—Ç–∞—Ä—É—é –∫–∏—Ä–∫—É, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–π—Ç–∏ –Ω–æ–≤—É—é –≤–æ –≤—Ä–µ–º—è –≤—ã–ª–∞–∑–∫–∏!")
        elif pickaxe.level != 0 and pickaxe.durability == 0:
            bot.send_message(
                user_id, f"–ö–∏—Ä–∫–∞ {tw.inflect_to_dative(gnome.name)} –ø—Ä–µ–≤—Ä–∞—Ç–∏–ª–∞—Å—å –≤ –ø—ã–ª—å –æ—Ç –≤—Ä–µ–º–µ–Ω–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–π—Ç–∏ –Ω–æ–≤—É—é –≤–æ –≤—Ä–µ–º—è –≤—ã–ª–∞–∑–∫–∏!")
        else:
            bot.send_message(
                user_id, f"{gnome.name} —è–≤–ª—è–µ—Ç—Å—è {tw.detect_gender(gnome.name, '—Å—á–∞—Å—Ç–ª–∏–≤—ã–º', '—Å—á–∞—Ç–ª–∏–≤–æ–π')} {tw.detect_gender(gnome.name, '–æ–±–ª–∞–¥–∞—Ç–µ–ª–µ–º', '–æ–±–ª–∞–¥–∞—Ç–µ–ª—å–Ω–∏—Ü–µ–π')} –∫–∏—Ä–∫–∏ {pickaxe.level} —É—Ä–æ–≤–Ω—è. –ü—Ä–æ—á–Ω–æ—Å—Ç—å –∫–∏—Ä–∫–∏ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç {pickaxe.durability//5}%.")
    else:
        bot.reply_to(
            message, "–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –≥–Ω–æ–º–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–µ–≥–æ –ø–µ—Ä–≤–æ–≥–æ –≥–Ω–æ–º–∞.")


def handle_drink_gnome(message, user_id):
    gnome = get_gnome(user_id)
    if gnome:
        if increase_thirst_level(user_id):
            gnome = get_gnome(user_id)
            if show_beer(user_id) != 0:
                bot.reply_to(
                    message, f"–í—ã —É–≥–æ—Å—Ç–∏–ª–∏ {tw.inflect_to_accusative(gnome.name)} –ø–∏–≤–æ–º!\n–£—Ä–æ–≤–µ–Ω—å –∂–∞–∂–¥—ã: " + "üç∫"*dw.level_of_thirst(gnome.get_thirst_level()))
            else:
                bot.reply_to(
                    message, f"–í—ã —É–≥–æ—Å—Ç–∏–ª–∏ {tw.inflect_to_accusative(gnome.name)} –ø–∏–≤–æ–º!\n–£—Ä–æ–≤–µ–Ω—å –∂–∞–∂–¥—ã: " + "üç∫"*dw.level_of_thirst(gnome.get_thirst_level())+"\n–ó–∞–ø–∞—Å—ã –ø–∏–≤–∞ –∏—Å—Å—è–∫–ª–∏!")
        else:
            bot.reply_to(
                message, f"–ó–∞–ø–∞—Å—ã –ø–∏–≤–∞ –∏—Å—Å—è–∫–ª–∏ - —Å–∫–æ—Ä–µ–µ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ—Å—å –Ω–∞ –ø–æ–∏—Å–∫–∏!")
    else:
        bot.reply_to(
            message, "–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –≥–Ω–æ–º–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–µ–≥–æ –ø–µ—Ä–≤–æ–≥–æ –≥–Ω–æ–º–∞.")


def schedule_checker_hunger():
    while True:
        with sq.connect("gnomes.db") as con:
            sleep(4000)
            cursor = con.cursor()
            cursor.execute("SELECT user_id FROM users_gnomes")
            user_ids = cursor.fetchall()
            for user_id in user_ids:
                decrease_hunger_level(user_id[0])


def schedule_checker_thirst():
    while True:
        with sq.connect("gnomes.db") as con:
            sleep(4500)
            cursor = con.cursor()
            cursor.execute("SELECT user_id FROM users_gnomes WHERE is_dead!=1")
            user_ids = cursor.fetchall()
            for user_id in user_ids:
                decrease_thirst_level(user_id[0])


def schedule_checker_tickets():
    while True:
        with sq.connect("gnomes.db") as con:
            sleep(60*60)
            cursor = con.cursor()
            cursor.execute("SELECT user_id FROM users_gnomes WHERE is_dead!=1")
            user_ids = cursor.fetchall()
            for user_id in user_ids:
                increase_tickets(user_id[0])


def schedule_checker_mining():
    while True:
        with sq.connect("gnomes.db") as con:
            sleep(60*60)
            cursor = con.cursor()
            cursor.execute(
                "SELECT user_id FROM users_gnomes WHERE pickaxe_level!=0 AND pickaxe_durability!=0 AND is_dead!=1")
            user_ids = cursor.fetchall()
            for user_id in user_ids:
                mine_gold_task(user_id[0])


def schedule_checker_shop():
    while True:
        with sq.connect("gnomes.db") as con:
            sleep(24*60*60)
            cursor = con.cursor()
            cursor.execute("SELECT user_id FROM users_gnomes WHERE is_dead!=1")
            user_ids = cursor.fetchall()
            for user_id in user_ids:
                increase_shop(user_id[0])


def main():
    initialize_meat_grid()
    Thread(target=schedule_checker_hunger).start()
    Thread(target=schedule_checker_thirst).start()
    Thread(target=schedule_checker_tickets).start()
    Thread(target=schedule_checker_mining).start()
    Thread(target=schedule_checker_shop).start()
    bot.infinity_polling()


if __name__ == '__main__':
    main()
